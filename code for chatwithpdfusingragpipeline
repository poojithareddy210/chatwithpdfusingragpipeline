import fitz
import faiss
import numpy as np
from langchain.text_splitter import RecursiveCharacterTextSplitter

def extract_pdf_content(file_path):
    """Extracts text from the provided PDF file."""
    try:
        pdf_document = fitz.open(file_path)
        content = ""
        for page in pdf_document:
            content += page.get_text()
        return content
    except Exception as error:
        print(f"Error while accessing PDF: {error}")
        exit(1)

def split_text_into_chunks(content, max_length=500, overlap=50):
    """Splits the input text into smaller chunks for processing."""
    splitter = RecursiveCharacterTextSplitter(chunk_size=max_length, chunk_overlap=overlap)
    return splitter.split_text(content)

def build_vector_database(text_chunks):
    """Creates a FAISS vector store from the provided text chunks."""
    print("Indexing text chunks...")
    vector_data = np.array([[len(chunk)] for chunk in text_chunks], dtype="float32")
    index_dim = 1
    faiss_index = faiss.IndexFlatL2(index_dim)
    faiss_index.add(vector_data)
    print("Text chunks indexed in FAISS!")
    return faiss_index, text_chunks

def search_vector_database(search_term, vector_database, text_chunks):
    """Searches the vector database for relevant text chunks."""
    results = [chunk for chunk in text_chunks if search_term.lower() in chunk.lower()]
    if results:
        found_text = "\n\n".join(results)
        return f"Relevant content found:\n{found_text}"
    else:
        return "No matching content found for your query."

def main():
    pdf_file_path = "C:/Users/pooji/OneDrive/Documents/sample.pdf"
    print("Extracting content from the PDF...")
    pdf_text = extract_pdf_content(pdf_file_path)

    if not pdf_text.strip():
        print("The PDF appears to be empty or contains no readable text. Please verify the file.")
        return

    print("Splitting content into smaller chunks...")
    text_chunks = split_text_into_chunks(pdf_text)

    vector_db, indexed_chunks = build_vector_database(text_chunks)

    print("Ready to process your queries based on the PDF content.")
    while True:
        user_query = input("Enter your question (or type 'exit' to quit): ")
        if user_query.lower() == "exit":
            print("Goodbye!")
            break
        result = search_vector_database(user_query, vector_db, indexed_chunks)
        print("\nResponse:")
        print(result)
        print("-" * 50)

if __name__ == "__main__":
    main()
